<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.3.3.RELEASE</version>
		<relativePath />
	</parent>

	<groupId>com.zeroone.guestebook</groupId>
	<artifactId>guestebook-parent</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>pom</packaging>
	<inceptionYear>2016</inceptionYear>

	<modules>
		<module>../guestebook-spring</module>
	</modules>

	<properties>
        <project.custom.user.name>Erwin Müller</project.custom.user.name>
        <project.custom.user.email>erwin.mueller@deventm.org</project.custom.user.email>
        <project.custom.year>2016</project.custom.year>
		<project.custom.source.source>1.7</project.custom.source.source>
		<project.custom.source.target>1.7</project.custom.source.target>
		<project.custom.groovy.version>2.4.6</project.custom.groovy.version>
		<project.custom.groovy-eclipse-compiler.version>2.9.2-01</project.custom.groovy-eclipse-compiler.version>
		<project.custom.groovy-eclipse-batch.version>2.4.3-01</project.custom.groovy-eclipse-batch.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<file.encoding>${project.build.sourceEncoding}</file.encoding>
		<java.version>1.7</java.version>
	</properties>

	<developers>
		<developer>
			<id>EM</id>
			<name>Erwin Müller</name>
			<organization>Advanced Natural Research Insitute</organization>
			<email>erwin.mueller@deventm.org</email>
			<roles>
				<role>Owner</role>
				<role>Developer</role>
			</roles>
			<timezone>Europe/Berlin</timezone>
		</developer>
	</developers>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-thymeleaf</artifactId>
				<version>1.3.3.RELEASE</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-devtools</artifactId>
				<version>1.3.3.RELEASE</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-data-jpa</artifactId>
				<version>1.3.3.RELEASE</version>
			</dependency>
			<dependency>
				<groupId>org.hsqldb</groupId>
				<artifactId>hsqldb</artifactId>
				<version>2.3.3</version>
			</dependency>
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>3.4</version>
			</dependency>
			<dependency>
				<groupId>org.antlr</groupId>
				<artifactId>ST4</artifactId>
				<version>4.0.8</version>
			</dependency>
			<dependency>
				<groupId>org.codehaus.groovy</groupId>
				<artifactId>groovy</artifactId>
				<version>${project.custom.groovy.version}</version>
			</dependency>
			<dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>2.4</version>
			</dependency>

			<!-- hibernate dependencies -->
			<dependency>
				<groupId>org.hibernate</groupId>
				<artifactId>hibernate-core</artifactId>
				<version>5.0.7.Final</version>
			</dependency>
			<dependency>
				<groupId>org.hibernate</groupId>
				<artifactId>hibernate-entitymanager</artifactId>
				<version>5.0.7.Final</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-legacy</artifactId>
				<version>1.0.2.RELEASE</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
                <plugin>
                    <!-- The Compiler Plugin is used to compile the sources of your project. -->
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.3</version>
                </plugin>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>1.3.3.RELEASE</version>
				</plugin>
                <plugin>
                    <!-- Maven 2 plugin to check and update license headers in source files -->
                    <groupId>com.mycila.maven-license-plugin</groupId>
                    <artifactId>maven-license-plugin</artifactId>
                    <version>1.9.0</version>
                </plugin>
                <!-- As all Groovy artifacts and mixed Groovy/Java artifacts must generate
                    javadoc to release to central, this provides a nice mechanism for this to
                    occur. It is intended to be used with the Eclipse Maven plugin and asks Maven
                    for all source directories. -->
                <plugin>
                    <!-- MIT License -->
                    <groupId>com.bluetrainsoftware.maven</groupId>
                    <artifactId>groovydoc-maven-plugin</artifactId>
                    <version>1.3</version>
                </plugin>
			</plugins>
		</pluginManagement>

		<plugins>

			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
                    <source>${project.custom.source.source}</source>
                    <target>${project.custom.source.target}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
					<compilerId>groovy-eclipse-compiler</compilerId>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.codehaus.groovy</groupId>
						<artifactId>groovy-eclipse-compiler</artifactId>
						<version>${project.custom.groovy-eclipse-compiler.version}</version>
					</dependency>
					<dependency>
						<groupId>org.codehaus.groovy</groupId>
						<artifactId>groovy-eclipse-batch</artifactId>
						<version>${project.custom.groovy-eclipse-batch.version}</version>
					</dependency>
				</dependencies>
			</plugin>

			<plugin>
				<!-- plugin to recognize src/main/groovy and src/test/groovy if the java
					source directories are empty -->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/main/groovy</source>
							</sources>
						</configuration>
					</execution>
					<execution>
						<id>add-test-source</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/test/groovy</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>com.bluetrainsoftware.maven</groupId>
				<artifactId>groovydoc-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-docs</id>
						<phase>package</phase>
						<goals>
							<goal>attach-docs</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<configuration>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <escapeString>${project.custom.resources.escapestring}</escapeString>
				</configuration>
				<executions>
					<execution>
						<id>copy-groovydocs-to-site</id>
						<phase>site</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.reporting.outputDirectory}/groovydocs</outputDirectory>
							<overwrite>true</overwrite>
							<resources>
								<resource>
									<directory>${project.build.directory}/groovydoc</directory>
									<includes>
										<include>**/*</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

            <!-- deploy sources -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>jar</goal>
                            <goal>test-jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- deploy test sources -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- deploy javadoc -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

			<plugin>
				<groupId>com.mycila.maven-license-plugin</groupId>
				<artifactId>maven-license-plugin</artifactId>
				<configuration>
					<basedir>${basedir}</basedir>
					<header>${basedir}/src/main/resources/header.txt</header>
					<aggregate>true</aggregate>
					<encoding>${file.encoding}</encoding>
					<strictCheck>true</strictCheck>
					<properties>
						<project.name>${project.artifactId}</project.name>
						<project.year>${project.custom.year}</project.year>
						<project.user.name>${project.custom.user.name}</project.user.name>
						<project.user.email>${project.custom.user.email}</project.user.email>
					</properties>
					<excludes>
						<exclude>**/*.txt</exclude>
					</excludes>
					<mapping>
						<java>SLASHSTAR_STYLE</java>
						<groovy>SLASHSTAR_STYLE</groovy>
					</mapping>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

		</plugins>

	</build>

    <reporting>
        <plugins>
            <plugin>
                <!-- The Maven Project Info Reports Plugin is a plugin that generates
                    standard reports for the specified project. -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>2.8</version>
            </plugin>
            <plugin>
                <!-- The Surefire Report Plugin parses the generated TEST-*.xml files
                    under ${basedir}/target/surefire-reports and renders them to DOXIA which
                    creates the web interface version of the test results. -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>2.17</version>
            </plugin>
            <plugin>
                <!-- The Apache Maven Javadoc Plugin is a plugin that uses the javadoc
                    tool for generating javadocs for the specified project. -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.9.1</version>
            </plugin>
            <plugin>
                <!-- The JXR Plugin produces a cross-reference of the projectʼs sources.
                    The generated reports make it easier for the user to reference or find specific
                    lines of code. It is also handy when used with the PMD Plugin for referencing
                    errors found in the code. -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
                <version>2.4</version>
            </plugin>
            <plugin>
                <!-- A Maven plugin for the PMD toolkit, that produces a report on both
                    code rule violations and detected copy and paste fragments, as well as being
                    able to fail the build based on these metrics. -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>3.2</version>
                <configuration>
                    <linkXref>true</linkXref>
                    <sourceEncoding>${project.build.sourceEncoding}</sourceEncoding>
                    <minimumTokens>100</minimumTokens>
                    <targetJdk>${project.custom.source.target}</targetJdk>
                </configuration>
            </plugin>
            <plugin>
                <!-- This Plug-In generates reports based on the FindBugs Library -->
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
                <version>3.0.1</version>
            </plugin>
        </plugins>
    </reporting>

</project>
